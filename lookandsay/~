package main

import "fmt"

func main() {
	fmt.Println("vim-go")
	fmt.Println(lookAndcount(4))
}

/*
Look-and-Say Sequence
Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of below integers:
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

How is above sequence generated?
n’th term in generated by reading (n-1)’th term.

The first term is "1"

Second term is "11", generated by reading first term as "One 1"
(There is one 1 in previous term)

Third term is "21", generated by reading second term as "Two 1"

Fourth term is "1211", generated by reading third term as "One 2 One 1"

and so on

*/
func lookAndcount(n int) string {
	//Start number is "1"
	var str = make([]byte, 2)
	str[0] = '0' + 1 //n =1
	str[1] = '0' + 1 //n = 2
	for i := 3; i <= n; i++ {
		//In  below loop, previous char is processed in current iteration
		// that's why a dummy character is aded to make
		//sure that loop runs on extra iteration
		str = append(str, '$')
		count := 1
		//process previous term to find the next term
		var tmp []byte
		for j := 1; j < len(str); j++ {
			if str[j-1] != str[j] {
				cnt := count + '0'
				tmp = append(tmp, byte(cnt))
				tmp = append(tmp, str[j-1])
				count = 1
			} else {
				//if  matches, then increment count of matching char
				count++
			}

		}
		//Update str
		str = tmp
	}
	return string(str)
}
